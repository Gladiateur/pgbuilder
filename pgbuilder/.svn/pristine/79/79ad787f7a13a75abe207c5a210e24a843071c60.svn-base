/*
 * PgBuilder.java 18/9/30
 */
package gla.pgbuilder.builder;

import gla.pgbuilder.exception.WsdException;

import java.io.File;
import java.util.HashSet;
import java.util.NoSuchElementException;
import java.util.Set;

import org.apache.log4j.Logger;

/**
 * Package Builder
 * 
 * @author Gladiateur
 * @since 1.0
 */
public class PgBuilder {
	
	private Logger logger = Logger.getLogger(PgBuilder.class);
	
	String wsd_url = null;
	String wsd_url_pg = null;
	String wsd_body = null;
	String params_body = null;
	Wsd wsd = new Wsd() ;
	
	//解析wsd_url
	private Wsd resolver(String wsd_url){
		urlChecker(wsd_url);
		logger.debug("wsd_url="+wsd_url);
		logger.debug("params_body="+params_body);
		String[] paramsBodyArr = params_body.split(";");
		for (String string : paramsBodyArr) {
			String symbol = string.split(":")[0];
			if(!(symbol.matches("[w|s|d]|pg"))){
				throw new WsdException("参数不合法。参数列表：w:web,s:service,d:dao,pg:any");
			}
			if("w".equalsIgnoreCase(symbol)){
				if(wsd.getWeb() != null){
					throw new IllegalArgumentException("w");
				}
				wsd.setWeb(string.substring(2));
			}
			if("s".equalsIgnoreCase(symbol)){
				if(wsd.getService() != null){
					throw new IllegalArgumentException("s");
				}
				wsd.setService(string.substring(2));
			}
			if("d".equalsIgnoreCase(symbol)){
				if(wsd.getDao() != null){
					throw new IllegalArgumentException("d");
				}
				wsd.setDao(string.substring(2));
			}
			if("pg".equalsIgnoreCase(symbol)){
				if(wsd.getPg() != null){
					throw new IllegalArgumentException("pg");
				}
				wsd.setPg(string.substring(3));
			}
		}
		wsd.setPerfix(wsd_url_pg);
		return wsd;
	}

	//wsd_url校验器
	private void urlChecker(String wsd_url) {
		if(wsd_url.length() < 6){
			throw new WsdException("wsd_url头长度非法");
		}
		//1.去除wsd_url首尾空格
		wsd_url = wsd_url.trim();
		//2.忽略大小写验证头部分：
		String head = wsd_url.substring(0, 6);
		boolean headFlag = head.equalsIgnoreCase("wsd://");
		logger.debug("wsd头信息："+headFlag);
		if(!headFlag){
			//头信息错误
			throw new WsdException("wsd_url头部必须为：wsd://");
		}
		//头信息验证正确
		//3.证明在前缀后使用"/"符号后不再使用该符号：
		wsd_body = wsd_url.substring(6);
		boolean formatFlag = wsd_body.split("/").length == 2;
		logger.debug("wsd_body校验,formatFlag="+formatFlag);
		if(!formatFlag){
			throw new WsdException("wsd_body格式错误：wsd://perfix/x:xxx,...;");
		}
		//4.解析前缀包名：
		wsd_url_pg = wsd_body;
		wsd_url_pg = wsd_url_pg.substring(0,wsd_body.indexOf('/'));
		logger.debug("wsd_url_pg="+wsd_url_pg);
		//这里必须验证包名的合法性,用正则校验
		boolean rgFlag = wsd_url_pg.trim().
			matches("([a-zA-Z_][a-zA-Z0-9_]*[.])*([a-zA-Z_][a-zA-Z0-9_]*)$");
		logger.debug("正则校验包名结果："+rgFlag);
		if(!rgFlag){
			throw new WsdException("包名："+wsd_url_pg+"不合法");
		}	
		//校验通过，包名合法
		//6.1 去除参数体首尾空格 params_body=params_body.trim()
		params_body = wsd_body.
			substring(wsd_body.indexOf('/')+1).trim();
		//6.1.1  正则判断wsd_body的/后面的格式是否是：x:aaa,bbb,...;y:cc.dd,ee,...;这种格式
		boolean bodyFlag = params_body
		  .matches("([a-zA-Z]*[:]([a-zA-Z_][a-zA-Z0-9_]*[.|,])*([a-zA-Z_][a-zA-Z0-9_]*)[;])*$");
		if(!bodyFlag){
			throw new WsdException("wsd://perfix/wsd_body格式错误！");
		}
		this.wsd_url = wsd_url;
	}
	
	private void pgBuilder(Set<String> set){
		for (String path : set) {
			File f = new File("src/"+path);
			if(!f.exists()){
				f.mkdirs();
			}
			logger.info("package: "+path);
		}
	}
	
	private static String wsd_pojo = null;
	
	public static void setWsdPojo(String pojo){
		if(pojo == null){
			throw new NullPointerException();
		}
		boolean pojoFlag = pojo
		 .matches("([a-zA-Z_][a-zA-Z0-9_]*[.])*([a-zA-Z_][a-zA-Z0-9_]*)$");
		if(!pojoFlag){
			throw new WsdException("包名不合法");
		}
		wsd_pojo = pojo;
	}
	public static String getWsdPojo(){
		return wsd_pojo;
	}
	
	//通过包名获取该包下的所有java文件名，返回Set集合
	private Set<String> getNamesOfPackageAndFileSuffix(String perfix,
			String suffix) {
		if(perfix==null || suffix == null){
			throw new NullPointerException();
		}
		perfix = perfix.replaceAll("\\.", "/");
		File file = new File("src/"+perfix);
		if(!file.exists()){
			throw new NoSuchElementException("目标:"+perfix+"不存在");
		}
		String[] list = file.list();
		Set<String> names = new HashSet<String>();
		for (String string : list) {
			int index = string.lastIndexOf('.');
			if(suffix.equalsIgnoreCase(string.substring(index+1))){
				names.add(string.substring(0,index).toLowerCase());
			}
		}
		return names;
	}
	
	public static void pgBuild(String wsd_url){
		PgBuilder pgBuilder = new PgBuilder();
		Wsd wsd = pgBuilder.resolver(wsd_url);
		pgBuilder.pgBuilder(wsd.combiner());
	}
	public static void pgBuild(String wsd_pojo,String wsd_url){
		PgBuilder pgBuilder = new PgBuilder();
		Set<String> names = pgBuilder.
			getNamesOfPackageAndFileSuffix(wsd_pojo,"java");
		Wsd wsd = pgBuilder.resolver(wsd_url);
		String perfix = wsd.getPerfix();
		for (String perfixAppend : names) {
			wsd.setPerfix(perfix+"."+perfixAppend);
			pgBuilder.pgBuilder(wsd.combiner());
		}
		
		pgBuilder.defaultMVCTemplate();
	}
	private void defaultMVCTemplate(){
		logger.debug("wsd="+wsd);
		//Wsd [perfix=cn.gd.app.order, 
		//web=controller, service=service.impl, dao=mapper]
		/*
		 * wsd默认生成策略：DefaultMVCTemplate
		 * 	w:	1.只在最后一个子包下生成类
		 * 		2.生成后缀默认为包名
		 *  s:	1.若存在子包则在及最后一个子包下生成类，在上一个子包下生成接口
		 *  	2.若不存在则在最后一个包下生成接口和类
		 *  d:	与s相同
		 *  
		 *  
		 */
		String[] weds = wsd.getWeb().split(",");
		for (String web : weds) {
			logger.debug(web);
			//18:24:43,392 DEBUG PgBuilder:201 - web.action
			//18:24:43,392 DEBUG PgBuilder:201 - web.controller
		}
		
	
	}
}