/*
 * PgBuilder.java 18/9/30
 */
package gla.pgbuilder.builder;

import gla.pgbuilder.exception.WsdException;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Set;

import org.apache.log4j.Logger;

/**
 * Package Builder
 * 
 * @author Gladiateur
 * @since 1.0
 */
public class PgBuilder {
	
	private Logger logger = Logger.getLogger(PgBuilder.class);
	
	String wsd_url = null;
	String wsd_url_pg = null;
	String wsd_body = null;
	String params_body = null;
	Wsd wsd = new Wsd() ;
	
	//解析wsd_url
	private Wsd resolver(String wsd_url){
		urlChecker(wsd_url);
		logger.debug("wsd_url="+wsd_url);
		logger.debug("params_body="+params_body);
		String[] paramsBodyArr = params_body.split(";");
		for (String string : paramsBodyArr) {
			String symbol = string.split(":")[0];
			if(!(symbol.matches("[w|s|d]|pg"))){
				throw new WsdException("参数不合法。参数列表：w:web,s:service,d:dao,pg:any");
			}
			if("w".equalsIgnoreCase(symbol)){
				if(wsd.getWeb() != null){
					throw new IllegalArgumentException("w");
				}
				wsd.setWeb(string.substring(2));
			}
			if("s".equalsIgnoreCase(symbol)){
				if(wsd.getService() != null){
					throw new IllegalArgumentException("s");
				}
				wsd.setService(string.substring(2));
			}
			if("d".equalsIgnoreCase(symbol)){
				if(wsd.getDao() != null){
					throw new IllegalArgumentException("d");
				}
				wsd.setDao(string.substring(2));
			}
			if("pg".equalsIgnoreCase(symbol)){
				if(wsd.getPg() != null){
					throw new IllegalArgumentException("pg");
				}
				wsd.setPg(string.substring(3));
			}
		}
		wsd.setPerfix(wsd_url_pg);
		return wsd;
	}

	//wsd_url校验器
	private void urlChecker(String wsd_url) {
		if(wsd_url.length() < 6){
			throw new WsdException("wsd_url头长度非法");
		}
		//1.去除wsd_url首尾空格
		wsd_url = wsd_url.trim();
		//2.忽略大小写验证头部分：
		String head = wsd_url.substring(0, 6);
		boolean headFlag = head.equalsIgnoreCase("wsd://");
		logger.debug("wsd头信息："+headFlag);
		if(!headFlag){
			//头信息错误
			throw new WsdException("wsd_url头部必须为：wsd://");
		}
		//头信息验证正确
		//3.证明在前缀后使用"/"符号后不再使用该符号：
		wsd_body = wsd_url.substring(6);
		boolean formatFlag = wsd_body.split("/").length == 2;
		logger.debug("wsd_body校验,formatFlag="+formatFlag);
		if(!formatFlag){
			throw new WsdException("wsd_body格式错误：wsd://perfix/x:xxx,...;");
		}
		//4.解析前缀包名：
		wsd_url_pg = wsd_body;
		wsd_url_pg = wsd_url_pg.substring(0,wsd_body.indexOf('/'));
		logger.debug("wsd_url_pg="+wsd_url_pg);
		//这里必须验证包名的合法性,用正则校验
		boolean rgFlag = wsd_url_pg.trim().
			matches("([a-zA-Z_][a-zA-Z0-9_]*[.])*([a-zA-Z_][a-zA-Z0-9_]*)$");
		logger.debug("正则校验包名结果："+rgFlag);
		if(!rgFlag){
			throw new WsdException("包名："+wsd_url_pg+"不合法");
		}	
		//校验通过，包名合法
		//6.1 去除参数体首尾空格 params_body=params_body.trim()
		params_body = wsd_body.
			substring(wsd_body.indexOf('/')+1).trim();
		//6.1.1  正则判断wsd_body的/后面的格式是否是：x:aaa,bbb,...;y:cc.dd,ee,...;这种格式
		boolean bodyFlag = params_body
		  .matches("([a-zA-Z]*[:]([a-zA-Z_][a-zA-Z0-9_]*[.|,])*([a-zA-Z_][a-zA-Z0-9_]*)[;])*$");
		if(!bodyFlag){
			throw new WsdException("wsd://perfix/wsd_body格式错误！");
		}
		this.wsd_url = wsd_url;
	}
	
	private void pgBuilder(Set<String> set){
		for (String path : set) {
			File f = new File("src/"+path);
			if(!f.exists()){
				f.mkdirs();
			}
			logger.info("package: "+path);
		}
		
		logger.debug("pojo list:"+names);
		logger.debug(set);
		String perfix = wsd.getPerfix();
		logger.debug("perfix = "+perfix);
		logger.debug("wsd_pojo="+wsd_pojo);
		if(names.size() == 0){
			if(wsd_pojo!=null){
				//当wsd_pojo不为空时，根据它来生成类
				names = getNamesOfPackageAndFileSuffix(wsd_pojo, "java");
				logger.debug("java_files:"+names);
				
				//每层都包含全部的实体类相关的类
				String webs = wsd.getWeb();
				String services = wsd.getService();
				if(webs != null){
					webBox(webs);
				}
				if(services != null){
					//service.impl   service(接口)  impl(类)
					//ebi.ebo		ebi(接口)		ebo(类)
					//service		service(接口前缀I,类后缀为service)
					//impl			impl(接口前缀I，类后缀为impl)
					String[] service = services.split(",");
					for (String s : service) {
						logger.debug("s="+s);
						if(s.contains(".")){
							//包含点的情况：aa.bb.cc在bb生成接口，在cc生成实现类
							logger.debug("contains dot :"+s);
							String suffix = s.substring(0,s.lastIndexOf('.'));
							logger.debug("suffix = "+suffix);
							String package0 = (perfix+"." + suffix);
							String servicePath = package0.replaceAll("\\.", "/");
							logger.debug("servicePath="+servicePath);
							for (String file : names) {
								String fileName = servicePath + "/" 
										+ captureName(file) + captureName(suffix) + ".java";
								logger.debug("s:fileName="+fileName);
								String impl = s.substring(s.lastIndexOf(".")+1);
								logger.debug("s:impl="+impl);
								
								String implSuffix = captureName(suffix) + captureName(impl);
								logger.debug("implSuffix="+implSuffix);
								logger.debug("s >>> "+s);
								String implPath = (perfix +"." +s).replaceAll("\\.", "/");
								logger.debug("implPath="+implPath);
								String implFileName = implPath + "/" 
										+ captureName(file) + implSuffix + ".java";
								
								BufferedOutputStream bos2 = null;
								String interfaceName = captureName(file)+captureName(suffix);
								try {
									bos2 = new BufferedOutputStream(new FileOutputStream(
											new File("src/"+fileName)));
								} catch (FileNotFoundException e) {
								}
								try {
									StringBuilder sb = new StringBuilder();
									sb.append("package "+package0+";\n\n");
									sb.append("public interface "+interfaceName+"{\n\n");
									sb.append("\t//TODO \n\n");
									sb.append("}\n");
									
									bos2.write(sb.toString().getBytes());
									bos2.close();
								} catch (IOException e) {
								}
								
								BufferedOutputStream bos = null;
								try {
									bos = new BufferedOutputStream(new FileOutputStream(
											new File("src/"+implFileName)));
								} catch (FileNotFoundException e) {
								}
								try {
									StringBuilder sb = new StringBuilder();
									sb.append("package "+perfix +"." +s+";\n\n");
									sb.append("import "+package0+"."+interfaceName+";\n");
									sb.append("\npublic class "+captureName(file)+implSuffix);
									sb.append(" implements "+captureName(file)+captureName(suffix)+" {\n\n");
									sb.append("\t//TODO \n\n");
									sb.append("}\n");
									
									bos.write(sb.toString().getBytes());
									bos.close();
								} catch (IOException e) {
								}
							}
						}else{
							//不包含点的情况
							//abc  即生成接口又生成实现类
							logger.debug("not contains dot :"+s);
							String sPath = (perfix+"."+s).replaceAll("\\.", "/");
							
							String filePerfix = "I";	//default
							
							String fileSuffix = s;
							for (String file : names) {
								logger.debug(">>>>>"+sPath+"/"+filePerfix+file+fileSuffix+".java");
								
								BufferedOutputStream bos = null;
								String interfaceName = filePerfix + captureName(file);
								String implName = captureName(file) + captureName(fileSuffix);
								String interfacePath = sPath+"/"+interfaceName+".java";
								try {
									bos = new BufferedOutputStream(new FileOutputStream(
											new File("src/"+interfacePath)));
								} catch (FileNotFoundException e) {
								}
								try {
									StringBuilder sb = new StringBuilder();
									sb.append("package "+perfix+"."+s+";\n\n");
									sb.append("public interface "+interfaceName+"{\n\n");
									sb.append("\t//TODO \n\n");
									sb.append("}\n");
									bos.write(sb.toString().getBytes());
									bos.close();
								} catch (IOException e) {
								}
								
								BufferedOutputStream bos2 = null;
								String implPath =  sPath+"/"+implName+".java";
								try {
									bos2 = new BufferedOutputStream(new FileOutputStream(
											new File("src/"+implPath)));
								} catch (FileNotFoundException e) {
								}
								try {
									StringBuilder sb = new StringBuilder();
									sb.append("package "+perfix +"." +s+";\n\n");
									sb.append("public class "+implName);
									sb.append(" implements "+interfaceName+" {\n\n");
									sb.append("\t//TODO \n\n");
									sb.append("}\n");
									
									bos2.write(sb.toString().getBytes());
									bos2.close();
								} catch (IOException e) {
								}
							}
						}
					}
				}
			}
		}else{
			//已实体类为模块生成对应各层的类
			
			
		}
	}
	//////////////////////////////////////////
	/*String path0 = "/src/com/imooc/user/controller";
	File file = new File(path0);
	if(!file.exists()){
		file.mkdirs();
	}
	try {
		BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(
				new File(path0+"/"+Core.captureName(tableName)+".java")));
		bos.write(this.entityContent(tableName).toString().getBytes());
		bos.close();
	}catch(Exception e){
	}*/

	private void webBox(String webs) {
		String[] web = webs.split(",");
		for (String w : web) {
			logger.debug("w="+w);
			String package0 = wsd.getPerfix()+"."+w;
			logger.debug("web_package:"+package0);
			String path0 = package0.replaceAll("\\.", "/");
			logger.debug("path0="+path0);
			
			for (String file : names) {
				String suffix = path0.substring(path0.lastIndexOf('/')+1);
				String fileName = path0+"/"+captureName(file)+captureName(suffix)+".java";
				logger.debug("fileName="+fileName);
//							File f = new File("src/"+fileName);
				BufferedOutputStream bos = null;
				try {
					bos = new BufferedOutputStream(new FileOutputStream(
							new File("src/"+fileName)));
				} catch (FileNotFoundException e) {
				}
				try {
					StringBuilder sb = new StringBuilder();
					sb.append("package "+package0+";\n\n");
					sb.append("public class "+captureName(file)+captureName(suffix)+"{\n\n");
					sb.append("\t//TODO \n\n");
					sb.append("}\n");
					
					bos.write(sb.toString().getBytes());
					bos.close();
				} catch (IOException e) {
				}
			}
		}
	}
	
	
	
	
	
	
	//////////////////////////////////////////////
	/**
	 * 首字母大写
	 * 
	 * */
	public final static String captureName(String name) {
		if (isLowwer(name) == true) {
			char[] cs = name.toCharArray();
			cs[0] -= 32;
			return String.valueOf(cs);
		} else {
			return name;
		}

	}
	public final static boolean isLowwer(String table) {
		byte[] b = table.getBytes();
		return (b[0] >= 97 && b[0] <= 122) == true ? true : false;
	}
	
	private static String wsd_pojo = null;
	
	public static void setWsdPojo(String pojo){
		if(pojo == null){
			throw new NullPointerException();
		}
		boolean pojoFlag = pojo
		 .matches("([a-zA-Z_][a-zA-Z0-9_]*[.])*([a-zA-Z_][a-zA-Z0-9_]*)$");
		if(!pojoFlag){
			throw new WsdException("包名不合法");
		}
		wsd_pojo = pojo;
	}
	public static String getWsdPojo(){
		return wsd_pojo;
	}
	
	private List<String> names = new ArrayList<String>();
	//通过包名获取该包下的所有java文件名，返回Set集合
	private List<String> getNamesOfPackageAndFileSuffix(String perfix,
			String suffix) {
		if(perfix==null || suffix == null){
			throw new NullPointerException();
		}
		perfix = perfix.replaceAll("\\.", "/");
		File file = new File("src/"+perfix);
		if(!file.exists()){
			throw new NoSuchElementException("目标:"+perfix+"不存在");
		}
		String[] list = file.list();
		for (String string : list) {
			int index = string.lastIndexOf('.');
			if(suffix.equalsIgnoreCase(string.substring(index+1))){
				names.add(string.substring(0,index).toLowerCase());
			}
		}
		return names;
	}
	
	
	public static void pgBuild(String wsd_url){
		PgBuilder pgBuilder = new PgBuilder();
		Wsd wsd = pgBuilder.resolver(wsd_url);
		pgBuilder.pgBuilder(wsd.combiner());
	}
	public static void pgBuild(String wsd_pojo,String wsd_url){
		PgBuilder pgBuilder = new PgBuilder();
		List<String> names = pgBuilder.
			getNamesOfPackageAndFileSuffix(wsd_pojo,"java");
		Wsd wsd = pgBuilder.resolver(wsd_url);
		String perfix = wsd.getPerfix();
		for (String perfixAppend : names) {
			wsd.setPerfix(perfix+"."+perfixAppend);
			pgBuilder.pgBuilder(wsd.combiner());
		}
	}
}